name: Release Image

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - .github/release-please/manifest.json

env:
  REGISTRY: ghcr.io

jobs:
  release_please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - uses: googleapis/release-please-action@a02a34c4d625f9be7cb89156071d8567266a2445 # v4
        id: release
        with:
          skip-github-pull-request: true
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          config-file: .github/release-please/config.json
          manifest-file: .github/release-please/manifest.json
  release_image:
    runs-on: ubuntu-latest
    needs: release_please
    if: ${{ needs.release_please.outputs.releases_created }}
    strategy:
      matrix:
        image: ${{ fromJson(needs.release_please.outputs.paths_released) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Detect changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            build:
              - ${{ matrix.image }}/!(**.md)
      - name: Get image name
        env:
          IMAGE: ${{ matrix.image }}
        id: get-image-name
        run: echo "fragment=${IMAGE##*/}" >> "$GITHUB_OUTPUT"
      - name: Get image version
        id: get-image-version
        run: echo "version=$(jq -r '."${{ matrix.image }}"' < .github/release-please/manifest.json)" >> "$GITHUB_OUTPUT"
      - name: Get image platform
        id: get-image-platform
        run: echo "platform=$(jq -r '."${{ matrix.image }}"' < .github/release-please/platform.json)" >> "$GITHUB_OUTPUT"
      - name: Docker Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: meta
        with:
          images: ${{ format('{0}/{1}/{2}', env.REGISTRY ,'teutonet/oci-images', steps.get-image-name.outputs.fragment ) }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ steps.get-image-version.outputs.version }}
            type=sha,prefix=
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: ${{ matrix.image }}
          platforms: ${{ steps.get-image-platform.outputs.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
  abort:
    runs-on: ubuntu-latest
    needs: release_please
    if: ${{ !needs.release_please.outputs.releases_created }}
    steps:
      - name: abort if no release was made
        run: |
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}